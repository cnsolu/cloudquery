// Code generated by codegen using template resource_list_describe_mock_test.go.tpl; DO NOT EDIT.

package cognito

import (
	"testing"

	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client/mocks"
	"github.com/cloudquery/faker/v3"
	"github.com/golang/mock/gomock"

	cognito "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
)

func buildCognitoUserPoolIdentityProviders(t *testing.T, ctrl *gomock.Controller) client.Services {
	mock := mocks.NewMockCognitoUserPoolsClient(ctrl)

	var item types.ProviderDescription
	if err := faker.FakeData(&item); err != nil {
		t.Fatal(err)
	}
	mock.EXPECT().ListIdentityProviders(
		gomock.Any(),
		&cognito.ListIdentityProvidersInput{},
		gomock.Any(),
	).Return(
		&cognito.ListIdentityProvidersOutput{

			Providers: []types.ProviderDescription{item},
		},
		nil,
	)

	var detail types.IdentityProviderType
	if err := faker.FakeData(&detail); err != nil {
		t.Fatal(err)
	}
	// Skipped MatchedGetAndListFields due to .AWSServiceClient being "CognitoUserPools"

	mock.EXPECT().DescribeIdentityProvider(
		gomock.Any(),
		&cognito.DescribeIdentityProviderInput{

			ProviderName: item.ProviderName,
		},
		gomock.Any(),
	).Return(

		&cognito.DescribeIdentityProviderOutput{
			IdentityProvider: &detail,
		},

		nil,
	)

	return client.Services{
		CognitoUserPools: mock,
	}
}

func TestCognitoUserPoolIdentityProviders(t *testing.T) {
	client.MockTestHelper(t, CognitoUserPoolIdentityProviders(), buildCognitoUserPoolIdentityProviders, client.TestOptions{})
}
