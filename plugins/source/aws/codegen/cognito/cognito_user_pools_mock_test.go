// Code generated by codegen using template resource_list_describe_mock_test.go.tpl; DO NOT EDIT.

package cognito

import (
	"testing"

	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client/mocks"
	"github.com/cloudquery/faker/v3"
	"github.com/golang/mock/gomock"

	cognito "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
)

func buildCognitoUserPools(t *testing.T, ctrl *gomock.Controller) client.Services {
	mock := mocks.NewMockCognitoUserPoolsClient(ctrl)

	var item types.UserPoolDescriptionType
	if err := faker.FakeData(&item); err != nil {
		t.Fatal(err)
	}
	mock.EXPECT().ListUserPools(
		gomock.Any(),
		&cognito.ListUserPoolsInput{},
		gomock.Any(),
	).Return(
		&cognito.ListUserPoolsOutput{

			UserPools: []types.UserPoolDescriptionType{item},
		},
		nil,
	)

	var detail types.UserPoolType
	if err := faker.FakeData(&detail); err != nil {
		t.Fatal(err)
	}
	// Skipped MatchedGetAndListFields due to .AWSServiceClient being "CognitoUserPools"

	mock.EXPECT().DescribeUserPool(
		gomock.Any(),
		&cognito.DescribeUserPoolInput{

			UserPoolId: item.Id,
		},
		gomock.Any(),
	).Return(

		&cognito.DescribeUserPoolOutput{
			UserPool: &detail,
		},

		nil,
	)

	return client.Services{
		CognitoUserPools: mock,
	}
}

func TestCognitoUserPools(t *testing.T) {
	client.MockTestHelper(t, CognitoUserPools(), buildCognitoUserPools, client.TestOptions{})
}
