// Code generated by codegen using template resource_list_describe_mock_test.go.tpl; DO NOT EDIT.

package cognito

import (
	"testing"

	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client/mocks"
	"github.com/cloudquery/faker/v3"
	"github.com/golang/mock/gomock"

	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	cognito "github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity/types"
)

func buildCognitoIdentityPools(t *testing.T, ctrl *gomock.Controller) client.Services {
	mock := mocks.NewMockCognitoIdentityPoolsClient(ctrl)

	var item types.IdentityPoolShortDescription
	if err := faker.FakeData(&item); err != nil {
		t.Fatal(err)
	}
	mock.EXPECT().ListIdentityPools(
		gomock.Any(),
		&cognito.ListIdentityPoolsInput{},
		gomock.Any(),
	).Return(
		&cognito.ListIdentityPoolsOutput{

			IdentityPools: []types.IdentityPoolShortDescription{item},
		},
		nil,
	)

	var detail cognitoidentity.DescribeIdentityPoolOutput
	if err := faker.FakeData(&detail); err != nil {
		t.Fatal(err)
	}

	detail.IdentityPoolId = item.IdentityPoolId

	mock.EXPECT().DescribeIdentityPool(
		gomock.Any(),
		&cognito.DescribeIdentityPoolInput{

			IdentityPoolId: item.IdentityPoolId,
		},
		gomock.Any(),
	).Return(

		&detail,

		nil,
	)

	return client.Services{
		CognitoIdentityPools: mock,
	}
}

func TestCognitoIdentityPools(t *testing.T) {
	client.MockTestHelper(t, CognitoIdentityPools(), buildCognitoIdentityPools, client.TestOptions{})
}
