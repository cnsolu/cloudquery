// Code generated by codegen using template resource_list_describe.go.tpl; DO NOT EDIT.

package cognito

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/pkg/errors"

	cognito "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
)

func CognitoUserPoolIdentityProviders() *schema.Table {
	return &schema.Table{
		Name:      "aws_cognito_user_pool_identity_providers",
		Resolver:  fetchCognitoUserPoolIdentityProviders,
		Multiplex: client.ServiceAccountRegionMultiplexer("cognito"),
		Columns: []schema.Column{
			{
				Name:     "userpool_cq_id",
				Type:     schema.TypeUUID,
				Resolver: schema.ParentIdResolver,
			},
			{
				Name:     "attribute_mapping",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AttributeMapping"),
			},
			{
				Name:     "creation_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationDate"),
			},
			{
				Name:     "idp_identifiers",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("IdpIdentifiers"),
			},
			{
				Name:     "last_modified_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastModifiedDate"),
			},
			{
				Name:     "provider_details",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ProviderDetails"),
			},
			{
				Name:     "provider_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ProviderName"),
			},
			{
				Name:     "provider_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ProviderType"),
			},
			{
				Name:     "user_pool_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UserPoolId"),
			},
		},
	}
}

func fetchCognitoUserPoolIdentityProviders(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().CognitoUserPools

	r1 := parent.Item.(types.UserPoolType)

	input := cognito.ListIdentityProvidersInput{
		UserPoolId: r1.Id,
	}
	paginator := cognito.NewListIdentityProvidersPaginator(svc, &input)
	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {

			return errors.WithStack(err)
		}

		for _, item := range output.Providers {

			do, err := svc.DescribeIdentityProvider(ctx, &cognito.DescribeIdentityProviderInput{
				UserPoolId: r1.Id,

				ProviderName: item.ProviderName,
			})
			if err != nil {

				if cl.IsNotFoundError(err) {
					continue
				}
				return errors.WithStack(err)
			}
			res <- do.IdentityProvider
		}
	}
	return nil
}
