// Code generated by codegen using template resource_list_and_detail.go.tpl; DO NOT EDIT.

package athena

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/pkg/errors"

	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/aws/aws-sdk-go-v2/service/athena/types"
	resolvers "github.com/cloudquery/cloudquery/plugins/source/aws/codegenmain/resolvers/athena"
)

func AthenaDataCatalogs() *schema.Table {
	return &schema.Table{
		Name:      "aws_athena_data_catalogs",
		Resolver:  fetchAthenaDataCatalogs,
		Multiplex: client.ServiceAccountRegionMultiplexer("athena"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Parameters"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolvers.ResolveDataCatalogArn,
			},
			{
				Name:        "tags",
				Type:        schema.TypeJSON,
				Resolver:    resolveAthenaDataCatalogsTags,
				Description: `Tags associated with the Athena data catalog.`,
			},
		},

		Relations: []*schema.Table{
			AthenaDataCatalogDatabases(),
		},
	}
}

func fetchAthenaDataCatalogs(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	return errors.WithStack(client.ListAndDetailResolver(ctx, meta, res, listDataCatalogs, listDataCatalogsDetail))
}

func listDataCatalogs(ctx context.Context, meta schema.ClientMeta, detailChan chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Athena

	input := athena.ListDataCatalogsInput{}

	for {
		response, err := svc.ListDataCatalogs(ctx, &input)
		if err != nil {
			return errors.WithStack(err)
		}
		for _, item := range response.DataCatalogsSummary {
			detailChan <- item
		}
		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}

func listDataCatalogsDetail(ctx context.Context, meta schema.ClientMeta, resultsChan chan<- interface{}, errorChan chan<- error, listInfo interface{}) {
	cl := meta.(*client.Client)
	item := listInfo.(types.DataCatalogSummary)
	svc := cl.Services().Athena
	response, err := svc.GetDataCatalog(ctx, &athena.GetDataCatalogInput{
		Name: item.CatalogName,
	})
	if err != nil {

		// retrieving of default data catalog (AwsDataCatalog) returns "not found error" but it exists and its
		// relations can be fetched by its name
		if *item.CatalogName == "AwsDataCatalog" {
			resultsChan <- types.DataCatalog{Name: item.CatalogName, Type: item.Type}
			return
		}

		if cl.IsNotFoundError(err) {
			return
		}
		errorChan <- errors.WithStack(err)
		return
	}
	resultsChan <- *response.DataCatalog
}

func resolveAthenaDataCatalogsTags(ctx context.Context, meta schema.ClientMeta, resource *schema.Resource, c schema.Column) error {
	cl := meta.(*client.Client)
	svc := cl.Services().Athena
	item := resource.Item.(types.DataCatalog)
	params := athena.ListTagsForResourceInput{
		ResourceARN: aws.String(resolvers.CreateDataCatalogArn(cl, *item.Name)),
	}
	tags := make(map[string]string)
	for {
		result, err := svc.ListTagsForResource(ctx, &params)
		if err != nil {
			if cl.IsNotFoundError(err) {
				return nil
			}
			return errors.WithStack(err)
		}
		client.TagsIntoMap(result.Tags, tags)
		if aws.ToString(result.NextToken) == "" {
			break
		}
		params.NextToken = result.NextToken
	}
	return errors.WithStack(resource.Set(c.Name, tags))
}
