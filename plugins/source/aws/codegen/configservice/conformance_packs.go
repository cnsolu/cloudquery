// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package configservice

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/pkg/errors"

	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/smithy-go"
)

func ConfigServiceConformancePacks() *schema.Table {
	return &schema.Table{
		Name:      "aws_conformance_packs",
		Resolver:  fetchConfigServiceConformancePacks,
		Multiplex: client.ServiceAccountRegionMultiplexer("config"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ConformancePackArn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "conformance_pack_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ConformancePackId"),
			},
			{
				Name:     "conformance_pack_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ConformancePackName"),
			},
			{
				Name:     "conformance_pack_input_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ConformancePackInputParameters"),
			},
			{
				Name:     "created_by",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreatedBy"),
			},
			{
				Name:     "delivery_s_3_bucket",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DeliveryS3Bucket"),
			},
			{
				Name:     "delivery_s_3_key_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DeliveryS3KeyPrefix"),
			},
			{
				Name:     "last_update_requested_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastUpdateRequestedTime"),
			},
		},

		Relations: []*schema.Table{
			ConfigServiceConformancePacksRuleCompliances(),
		},
	}
}

func fetchConfigServiceConformancePacks(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().ConfigService

	input := configservice.DescribeConformancePacksInput{}

	for {
		response, err := svc.DescribeConformancePacks(ctx, &input)
		if err != nil {

			// This is a workaround until this bug is fixed = https://github.com/aws/aws-sdk-go-v2/issues/1539
			var ae smithy.APIError
			if (cl.Region == "af-south-1" || cl.Region == "ap-northeast-3") && errors.As(err, &ae) && ae.ErrorCode() == "AccessDeniedException" {
				return nil
			}
			return errors.WithStack(err)
		}

		res <- response.ConformancePackDetails

		if aws.ToString(response.NextToken) == "" {
			break
		}
		input.NextToken = response.NextToken
	}
	return nil
}
