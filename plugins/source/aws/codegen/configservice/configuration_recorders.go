// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package configservice

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/pkg/errors"

	"github.com/aws/aws-sdk-go-v2/service/configservice"
	resolvers "github.com/cloudquery/cloudquery/plugins/source/aws/codegenmain/resolvers/configservice"
)

func ConfigServiceConfigurationRecorders() *schema.Table {
	return &schema.Table{
		Name:      "aws_configuration_recorders",
		Resolver:  fetchConfigServiceConfigurationRecorders,
		Multiplex: client.ServiceAccountRegionMultiplexer("config"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
				Description: `The AWS Account ID of the resource.`,
			},
			{
				Name:        "region",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
				Description: `The AWS Region of the resource.`,
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "recording_group",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RecordingGroup"),
			},
			{
				Name:     "role_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RoleARN"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolvers.ResolveConfigRecorderArn,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
		},

		Relations: []*schema.Table{
			ConfigServiceConfigurationRecorderStatus(),
		},
	}
}

func fetchConfigServiceConfigurationRecorders(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().ConfigService

	input := configservice.DescribeConfigurationRecordersInput{}

	{
		response, err := svc.DescribeConfigurationRecorders(ctx, &input)
		if err != nil {

			return errors.WithStack(err)
		}

		res <- response.ConfigurationRecorders

	}
	return nil
}
