// Code generated by codegen using template resource_get.go.tpl; DO NOT EDIT.

package configservice

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/pkg/errors"

	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
)

func ConfigServiceConfigurationRecorderStatus() *schema.Table {
	return &schema.Table{
		Name:      "aws_configuration_recorder_status",
		Resolver:  fetchConfigServiceConfigurationRecorderStatus,
		Multiplex: client.ServiceAccountRegionMultiplexer("configservice"),
		Columns: []schema.Column{
			{
				Name:     "configurationrecorder_cq_id",
				Type:     schema.TypeUUID,
				Resolver: schema.ParentIdResolver,
			},
			{
				Name:     "last_error_code",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LastErrorCode"),
			},
			{
				Name:     "last_error_message",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LastErrorMessage"),
			},
			{
				Name:     "last_start_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastStartTime"),
			},
			{
				Name:     "last_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LastStatus"),
			},
			{
				Name:     "last_status_change_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastStatusChangeTime"),
			},
			{
				Name:     "last_stop_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastStopTime"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "recording",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Recording"),
			},
		},
	}
}

func fetchConfigServiceConfigurationRecorderStatus(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc := cl.Services().ConfigService

	r1 := parent.Item.(types.ConfigurationRecorder)

	input := configservice.DescribeConfigurationRecorderStatusInput{
		ConfigurationRecorderNames: []string{*r1.Name},
	}

	{
		response, err := svc.DescribeConfigurationRecorderStatus(ctx, &input)
		if err != nil {

			return errors.WithStack(err)
		}

		res <- response.ConfigurationRecordersStatus

	}
	return nil
}
